                                                             アプリを日本語に対応させる          4.2

    構文はバリュー全体をブレース（{ }）で囲い、プレースホルダ名に続けて、
plural というキーワードを記述します。
    たとえば、日本語の arb ファイルを以下のように作成したとします。

 ./lib/l10n/app_ja.arb
{
    // 省略
    "numOfSearchResult": "{count, plural, =0{検索結果はありません} other{検索結果は
{count}件です}}",
    "@numOfSearchResult": {
      "description": "検索結果",
        "placeholders": {
          "count": {
                "type": "int"
            }
        }
    }
}


    実行結果は次のようになります。

Text(l10n.numOfSearchResult(0)),
// => 検索結果はありません
Text(l10n.numOfSearchResult(1)),
// => 検索結果は1件です
Text(l10n.numOfSearchResult(2)),
// => 検索結果は2件です

    この英語訳を作ります。検索結果を「result」と訳し、さらに「result」と
「results」
        を使い分けます。arb ファイルを以下のように記述することで実現で
きます。
  "numOfSearchResult": "{count, plural, =0{There is no result} =1{1 result found}
other{{count} results found}}"

    英語での実行結果は次のようになります。

Text(l10n.numOfSearchResult(0)),
// => There is no result
Text(l10n.numOfSearchResult(1)),
// => 1 result found
Text(l10n.numOfSearchResult(2)),
// => 2 results found

    場合分けは =0 や =1 のほかに、few や many といったキーワードも存在します
が、日本語や英語では使われません。具体的な数値がどのケースに該当する
かは言語ごとに異なるので注意してください。その挙動は ICU（International

                                                                                    127
第
    4 アプリの日本語化対応、アセット管理、環境変数
          章




              Components for Unicode）というライブラリに準拠しており、ICU は CLDR
              （Common Locale Data Repository）が提供するデータを活用しています。詳細な挙
              動を知りたい方は Unicode CLDR 注 2 のドキュメントを参照してください。


              複数の言語への対応
                   対応する言語ごとに arb ファイルを追加することでアプリを複数の言語に
              翻訳できます。arb ファイルがどの言語に対応しているかはファイル名で決定
              します。アンダーバーと拡張子の間の文字列が、その arb ファイルが対応す
              る言語として扱われます。たとえば、app_ja.arb ではアンダーバーと拡張子
              の間が ja なので日本語の arb ファイルとして扱われます。日本語と英語に対
              応する場合は次のようなファイル構成となります。

                     ~/project_root
                     └── lib
                         ├── l10n
                         │    ├── app_en.arb
                         │    └── app_ja.arb
                         └── ...（省略）



                   また、それ以外にも @@locale キーに言語を指定する方法もあります。

               ./lib/l10n/japanese.arb
               {
                   "@@locale": "ja",

                   "helloWorld": "こんにちは世界！",
                   "@helloWorld": {
                     "description": "お決まりの挨拶"
                   }
               }

                   この場合は自由にファイルを決めて問題ありません。

                     ~/project_root
                     └── lib
                         ├── l10n
                         │    ├── english.arb
                         │    └── japanese.arb
                         └── ...（省略）




              注2     https://cldr.unicode.org/index/cldr-spec/plural-rules


    128
                                    プロジェクトにアセットを追加する   4.3


  4.3
  プロジェクトにアセットを追加する
                             どうこん
  Flutter ではアプリに同梱する画像やテキストファイルなどをアセットと呼
びます。本書では主に画像の取り扱いについて紹介します。後半ではアセッ
トを扱う際に便利な flutter_gen というパッケージについても紹介します。ア
セットを扱う際はこのパッケージを使うことをお勧めします。



  アプリに画像を追加する
  まずはアセットを配置するディレクトリを作成します。ディレクトリ名は
任意ですが assets などが一般的です。assets ディレクトリを作成したら、そ
の中に画像を配置します。今回は PNG 形式で円の画像を用意し、circle.png
という名前で assets ディレクトリに配置します（図 4.9）。

        ~/project_root
        └── assets
            └── circle.png


  なお、Flutter が対応している画像フォーマットは JPEG、WebP、GIF、PNG、
BMP、WBMP です。

図 4.9      circle.png




  続いて、pubspec.yaml にアセットのパスを記述します。flutter セクショ
ンのサブセクションに assets を追加し、その下にアセットのパスを記述しま
す。
 ./pubspec.yaml
flutter:
  # 省略
  assets:
    - assets/circle.png

  これでアセットの準備は完了です。このアセットを表示するシンプルなア
プリを作成してみましょう。

                                                       129
第
    4 アプリの日本語化対応、アセット管理、環境変数
          章




               ./lib/main.dart
              import 'package:flutter/material.dart';

              void main() {
                  runApp(
                      const MaterialApp(
                        home: HomeScreen(),
                      ),
                  );
              }

              class HomeScreen extends StatelessWidget {
                  const HomeScreen({super.key});


                  @override
                  Widget build(BuildContext context) {
                      return Scaffold(
                         body: Center(
                            child: Image.asset('assets/circle.png'),   ❶
                         ),
                      );
                  }
              }

                  画像を表示するウィジェットとして Image ウィジェットがあります。❶で
              アセットのパスを指定し、Image ウィジェットを作成しています。
                  アプリを実行すると、図 4.10 のように円が表示されます。

              図 4.10       アセットの画像が表示される様子




    130
                                 プロジェクトにアセットを追加する   4.3

 pubspec.yaml に記述するアセットのパスは、ディレクトリ単位で指定する
こともできます。以下のように、/ で終わるパスを指定すると、そのディレ
クトリのすべてのファイルがアセットとして扱われます。ただし、通常はサ
ブディレクトリを再帰的に探索しないので注意しましょう（後述の解像度バリ
エーションを除く）。
 以下のようにアセットのパスを指定したとします。
./pubspec.yaml
flutter:
  # 省略
  assets:
    - assets/

 次のようなディレクトリ構成であれば、circle.png と square.png はアセッ
トしてアプリに組み込まれますが、icon.png はアセットとして扱われません。

    ~/project_root
    └── assets
        ├── circle.png
        ├── square.png
        └── icons
            └── icon.png


 アプリ内で assets/icons/icon.png を参照すると実行時エラーになります。



 端末の解像度に応じて画像を切り替える
 スマートフォンのディスプレイ解像度はさまざまです。解像度別にいくつ
か画像を用意し、実行時に切り替える手法があります。以下のようなディレ
クトリ構成でアセットを配置します。

    ~/project_root
    └── assets
        ├── 2x
        │   └── circle.png
        ├── 3x
        │   └── circle.png
        └── circle.png

 そして、前節で紹介したように pubspec.yaml にアセットのパスをディレク
トリ単位で指定します。

./pubspec.yaml
flutter:
  # 省略


                                                    131
第
    4 アプリの日本語化対応、アセット管理、環境変数
          章




                 assets:
                   - assets/

                このように、数値と末尾に「x」で終わるディレクトリを作成すると、解像度
              別のバリエーションとして解釈されます。assets/circle.png が縦横 72px だ
              としたら、これを基準に 2x には縦横 144px、3x には縦横 216px の画像を配置
              します。
                iPhone を例に、これらの画像がどのように選択されるか説明します。
              iPhone15 Pro Max のディスプレイ解像度は縦横 2796 × 1290px ですが、論理
              解像度は縦横 932 × 430pt です。論理解像度に対して、ディスプレイの物理
              解像度が 3 倍なので iPhone15 Pro Max で実行した場合、3x の画像が自動的に
              選択されます。
                わかりやすいように、2x の画像（図 4.11）と 3x の画像（図 4.12）として意図
              的に異なるものを用意しました。


              図 4.11   2x 配下の circle.png   図 4.12   3x 配下の circle.png




                iPhone14 Pro Max のシミュレータ、iPhone SE（第 3 世代）のシミュレータそ
              れぞれでアプリを実行すると、図 4.13 と図 4.14 のようになります。
                ただし、この方法は画像の準備に手間がかかったり、アプリのファイルサイ
              ズが大きくなるという問題があります。この問題はベクタ画像を使うことで解
              決できますので、flutter_svg というパッケージを利用して画像を扱うことをお
              勧めします。後述の flutter_gen と組み合わて利用する方法を紹介します。




    132
                                                     プロジェクトにアセットを追加する    4.3

図 4.13   iPhone15 Pro Max のシミュレ       図 4.14   iPhone SE（第 3 世代）のシミュ
          ータで実行した様子                              レータで実行した様子




  flutter_gen ── 型安全にアセットを扱うパッケージ
  本節の最初に画像アセットを表示するアプリの例を紹介しましたが、アセ
ットのパスを文字列で指定していました。パスを誤って入力すると、実行時
エラーとなってしまいます。これを防ぐために、アセットを扱う際は flutter_
gen というパッケージを利用することをお勧めします。flutter_gen は、アセッ
トにアクセスするコードを自動生成してくれるパッケージです。
  なお、前節でメッセージをローカライズした際に、生成されたコード
が .dart_tool/flutter_gen/gen_l10n ディレクトリに出力されていましたが、
ここで紹介する flutter_gen パッケージとは関係ありません。


flutter_genを導入する
  flutter_gen を利用してみましょう。パッケージを導入するためにプロジェ
クトのディレクトリで、ターミナルから以下のコマンドを実行してください。
# build_runnerパッケージとflutter_gen_runnerパッケージを導入
$ flutter pub add --dev build_runner flutter_gen_runner

  ソースコード生成ツールの build_runner と、flutter_gen のコードジェネレ
ータである flutter_gen_runner を導入しました。
  パッケージを追加したら、コードを生成するコマンドを実行します。

                                                                         133
第
    4 アプリの日本語化対応、アセット管理、環境変数
          章




              $ flutter packages pub run build_runner build


                  さっそく flutter_gen が生成したコードを利用するコードを書いてみましょう。

              ./lib/main.dart
              import 'package:flutter/material.dart';
              import 'gen/assets.gen.dart';    ❶


              void main() {
                  runApp(
                    const MaterialApp(
                       home: HomeScreen(),
                    ),
                  );
              }

              class HomeScreen extends StatelessWidget {
                  const HomeScreen({super.key});

                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                       body: Center(
                          child:
                              // Image.asset('assets/circle.png'),
                              Assets.circle.image(),    ❷
                       ),
                    );
                  }
              }

                  まず flutter_gen が生成したコードをインポートしています（❶）。アセット
              へのアクセスは flutter_gen の実行によって Assets クラスに定義されています。
              また、画像のアセットに関しては Image ウィジェットを返すメソッドも生成
              され便利です（❷）
                      。


              SVG画像の利用
                  先にも述べましたが、さまざまなスマートフォンの解像度に合わせて画像
              を複数用意するのは手間がかかります。それを解決する方法として、SVG 形
              式のファイルを利用する方法があります。SVG ファイルはベクタ画像の一種
              で、拡大／縮小しても画質が劣化しません。Flutter は SVG 画像をサポートし
              ていませんが、flutter_svg というパッケージが SVG 画像を描画するウィジェ
              ットを提供しています。

    134
