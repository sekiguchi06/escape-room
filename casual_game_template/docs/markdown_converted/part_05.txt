                                                       プロジェクトの作成      1.4

おり、fvm コマンドを使わなければそのまま利用可能です。ちなみに、筆者
は shell のエイリアスを利用して fvm の入力を省略しています。
 ~/.zshrc
alias flutter="fvm flutter"

  なお、第 2 章以降では fvm コマンドを省略して flutter コマンド、dart コマ
ンドを扱います。ご自身の環境、コマンドを実行するディレクトリにあわせ
て読み替えてください。



  1.4
  プロジェクトの作成

  Flutter プロジェクトは Android Studio から GUI（Graphical User Interface）で作
成します。



  Android Studioでの作成手順
  Android Studio のアプリケーションメニューから「File」➡「New」➡「New
Flutter Project」の順で選択すると、ウィンドウが表示されます（図 1.5）。

図 1.5   新規プロジェクトウィンドウ




                                                                       15
第
    1 環境構築とアプリの実行
         章
              Flutter SDK、Android Studio、Xcode




                ウィンドウ左のリストで「Flutter」が選択されていることを確認します。
             「Flutter SDK path」
                              は図 1.5 のように fvm でインストールした Flutter SDK を選
                 「Next」
             択します。    をクリックすると、プロジェクトの詳細を選択する画面に
                   （図 1.6）。
             切り替わります

             図 1.6     新規プロジェクトの詳細ウィンドウ




              「Project name」は任意の名前でけっこうです。プロジェクトを作成するデ
             ィレクトリを変更したい場合は「Project location」を任意に編集してください。
             今回は iOS と Android で動作するアプリのプロジェクトを作成するので「Project
             type」が Application になっていること、「Platforms」では Android と iOS にチ
             ェックが入っていることを確認してください。
              「Create」をクリックすると、Android Studio で作成した Flutter のテンプレ
             ートプロジェクトが開きます。



                テンプレートプロジェクトをのぞいてみよう
                作成されたプロジェクトのファイル、ディレクトリは表 1.1 のような構成
             になっています。.（ドット）から始まるファイル、ディレクトリや Android
             Studio のモジュールファイルなどを直接操作することは少ないかと思います。

    16
                                                  プロジェクトの作成   1.4

表 1.1     プロジェクトのファイル、ディレクトリ構成

ファイル名、ディレクトリ名 説明
.dart_tool       Dart 言語のツールが配置されるディレクトリ
.idea            Android Studio のプロジェクト設定ファイルが配置されるディレク
                 トリ
.metadata        Flutter ツールが利用するファイル
analysis_options.yaml コード静的解析のオプションファイル。lint ルールを変更する場合
                      に編集する
android          Android Studio のプロジェクト。Android ネイティブのコード、し
                 くみを利用する場合に閲覧、編集する
ios              Xcode のプロジェクト。iOS ネイティブのコード、しくみを利用す
                 る場合に閲覧、編集する
lib              Flutter の実装ファイルを配置するディレクトリ。Dart の実装ファ
                 イルはここに配置する
my_app.iml       Android Studio のモジュールファイル
pubspec.lock     パッケージ（ライブラリなど）のバージョンを解決するファイル
pubspec.yaml     Flutter プロジェクトの設定、依存関係を記述するファイル。パッ
                 ケージ（ライブラリなど）やアセット類はこのファイルに記述する
test             Flutter のテストコードを配置するディレクトリ




  fvmの設定
  作成したプロジェクトに対して fvm の設定を行います。今回は Flutter のバ
ージョンを 3.16.9 に設定します。プロジェクトのルートディレクトリで以下
のコマンドを実行します。
# プロジェクトで利用するfvmのバージョンを設定
$ fvm use 3.16.9

  すると、プロジェクトのルートディレクトリに.fvmというディレクトリが作成さ
れ、その中に Flutter SDK へのシンボリックリンクが配置されます。もし、git でバ
ージョン管理する場合は除外するように.gitignoreを編集しておきましょう。

 .gitignore
# 省略
.fvm/flutter_sdk # この行を追加

  続いて、Android Studio が参照する Flutter SDK のパスを変更します。Android
Studio を起動し、アプリケーションメニューから「Settings」を選択します。
Settings ウィンドウの検索窓に「Flutter」と入力し、ツリーの中から「Flutter」
を選択します（図 1.7）。「Flutter SDK Path」へ .fvm/flutter_sdk のシンボリッ
クリンクが示している先のパスを入力し、OK ボタンを押します。

                                                               17
第
    1 環境構築とアプリの実行
         章
             Flutter SDK、Android Studio、Xcode




             図 1.7    Settings ダイアログで Flutter SDK Path を設定




               1.5
               Flutterアプリの実行

               それではさっそくアプリを実行してみましょう。まずは図 1.8 に示す「Flutter
             Device Selection」ボタンから実行デバイスを選択します。




    18
                                                      Flutterアプリの実行   1.5

図 1.8   A
         ndroid Studio の Flutter Device Selection ボタン
                                                     （拡大左）
                                                         と実行ボタン
                                                              （拡大右）




  iOS Simulatorでの実行
 「Flutter Device Selection」のボタンをクリックすると「Open iOS Simulator」
という項目があります。これを選択すると iOS Simulator が起動します。
  iOS Simulator が起動したら、Android Studio の Navigation Bar にある実行ボ
タンをクリックします（図 1.8 の右側）。
  すると iOS Simulator 上でテンプレートの Flutter アプリが起動します
                                              （図1.9）
                                                   。

図 1.9   iOS Simulator で動作する Flutter アプリ




                                                                       19
第
    1 環境構築とアプリの実行
         章
              Flutter SDK、Android Studio、Xcode




                今まで一度も iOS Simulator を起動したことがない環境では、エラーが発生
             することがあります。筆者の環境では、Xcode から一度だけ iOS Simulator を
             起動すると解決しました。
                Xcode から iOS Simulator を起動するには、Xcode のアプリケーションメニ
             ューから「Xcode」
                       ➡「Open Developer Tool」➡「Simulator」の順で選択します。



                Android Emulatorでの実行
                作成済みの Android Emulator を探します。Android Studio のバージョンによ
             って、初期状態で Android Emulator が作成されている場合と作成されていな
             い場合があります。Android Studio のアプリケーションメニューから「Tools」
             ➡「Device Manager」を選択します。Device Manager の画面に Emulator が表示
             されなければ、以下の手順で作成します。


             Android Emulatorを作成する
                Device Manager の画面で「Create virtual device...」ボタンをクリックします
             （図 1.10）。

             図 1.10    Device Manager 画面の Create device ボタン




                すると、Android Emulator を作成するウィンドウが表示されます（図 1.11）。
             まず、Emulator の画面解像度や仮想ディスプレイサイズを選択し「Next」ボタ

    20
                                                                             Flutterアプリの実行   1.5

ンをクリックします。

図 1.11   Android Emulator を作成するウィンドウ




  続いて Emulator の API レベルを選択します。本書では API Level 34 を選択
しました。なお、Flutter がサポートしている API レベルは公式ドキュメント
「Supported deployment platforms」注 6 で確認できます。
の
  選択した API レベルのシステムイメージをダウンロード、選択し「Next」ボ
タンをクリックします。
  最後に Emulator の名前やその他の設定を行う画面に遷移します。特に必要
なければ初期値のまま「Finish」ボタンをクリックします。これで Android
Emulator の作成が完了しました。


Android Emulatorを起動し、
                    アプリを実行する
  iOS のときと同様に「Flutter Device Selection」のボタンをクリックして、作
                                      「Refresh」
成した Android Emulator を選択します。リストに現れない場合は        を
選択してみましょう。
  Android Emulator のウィンドウが表示されない場合は、Android Studio のメ
    「View」➡「Tool Windows」➡「Running Devices」
ニューから                                      を選択すると起動中
の Android Emulator が表示されます。


注6   https://docs.flutter.dev/development/tools/sdk/release-notes/supported-platforms


                                                                                              21
第
    1 環境構築とアプリの実行
         章
             Flutter SDK、Android Studio、Xcode




               Android Emulator が起動したら実行ボタン（図 1.8）をクリックします。
               すると Android Emulator 上でテンプレートの Flutter アプリが起動します
                                                              （図
             1.12）。

             図 1.12   Android Emulator で動作する Flutter アプリ




               1.6
               まとめ

               Flutter の開発環境をインストールし、iOS Simulator と Android Emulator で
             アプリが実行できるところまでを体験しました。
               マルチプラットフォームであるため環境を整える作業は多くの手順が必要
             となりますが、flutter doctor コマンドのようなサポートツールが用意され
             ていました。アプリの実行もエディタのプラグインによってスムーズだった
             かと思います。これらの優れた開発者体験も Flutter の魅力の一つですね。




    22
