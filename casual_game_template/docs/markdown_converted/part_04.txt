                                                                      Flutterの環境構築   1.2

の出力結果のように 2 項目に Android toolchain のエラー、5 項目に Android
Studio の警告が表示されます。
[✗] Android toolchain - develop for Android devices
    ✗ Unable to locate Android SDK.
      Install Android Studio from: https://developer.android.com/studio/index.html
      On first launch it will assist you in installing the Android SDK components.
      (or visit https://flutter.dev/docs/get-started/install/macos#android-setup
for detailed instructions).
      If the Android SDK has been installed to a custom location, please use
      `flutter config --android-sdk` to update to that location.

[!] Android Studio (not installed)


  こ の 場 合 は 最 初 に Android ア プ リ 開 発 用 の IDE（Integrated Development
Environment、統合開発環境）である Android Studio をインストールするのが簡
単です。Android の開発者向け Web サイトからダウンロードし、セットアッ
プウィザードの手順どおりに進めてください

・https://developer.android.com/studio/index.html

  完了したら、あらためて flutter doctor を実行します。Android Studio の
項にチェックが付けば OK です。

[✓] Android Studio (version 2023.1)


  続いて、Android toolchain をインストールします。Android Studio を起動し、
アプリケーションメニューから「Settings」を選択します。Settings ウィンドウ
の検索窓に「Android SDK」と入力し、ツリーの中から「Android SDK」を選択し
 （図 1.3）
ます      。「SDK Tools」タブを選択し、「Android SDK Command-line Tools
(latest)」にチェックを入れ、OK ボタンを押します。




                                                                                      7
第
    1 環境構築とアプリの実行
        章
            Flutter SDK、Android Studio、Xcode




            図 1.3    Settings ウィンドウ




              再び flutter doctor を実行します。以下のようにライセンスの同意に関す
            る内容が表示された場合は、メッセージ内のコマンドを実行します。

            [!] Android toolchain - develop for Android devices (Android SDK version 34.0.0)
                ! Some Android licenses not accepted. To resolve this, run: flutter doctor
            --android-licenses

            # Android toolchainのライセンスに同意する
            $ flutter doctor --android-licenses

              すると、対話形式でライセンスの同意操作を進められます。All SDK package
            licenses accepted と表示されたら完了です。

            （ライセンス条文）
            -----------------------------
            Accept? (y/N): y
            All SDK package licenses accepted


              再び flutter doctor を実行します。以下のようにチェックが付けば Android
            の開発環境のインストールは完了です。

            [✓] Android toolchain - develop for Android devices (Android SDK version 34.0.0)




    8
                                                                    Flutterの環境構築    1.2

iOSの開発環境をインストールする
 flutter doctor の出力結果から、Xcode の情報を確認しましょう。Xcode
                       （統合開発環境）です。iOS の開発環境
は Apple のプラットフォーム向けの IDE
がまだ構築されていない場合は、以下のように Xcode installation is
incomplete とメッセージが表示される可能性があります。

[✗] Xcode - develop for iOS and macOS
    ✗ Xcode installation is incomplete; a full installation is necessary for iOS
and macOS development.
      Download at: https://developer.apple.com/xcode/
      Or install Xcode via the App Store.


 この場合は最初に Xcode をインストールします。最も簡単な方法は Mac App
Store から Xcode をインストールする方法です（Tips 参照）。Mac App Store に
て、「Xcode」というキーワードで検索すると簡単に見つけられます。
 Xcode をインストールしたら、以下のコマンドを実行します。
# Xcodeコマンドラインツールのディレクトリを指定
$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
# Xcodeの関連パッケージをインストール
$ sudo xcodebuild -runFirstLaunch
# XcodeとSDKのライセンスに同意
$ sudo xcodebuild -license

 途中、何度か Xcode のライセンスに同意を求められることがあります。内
容を確認し、同意する場合は「agree」と入力します。

By typing 'agree' you are agreeing to the terms of the software license agreement
s. Any other response will cancel. [agree, cancel]
agree

 再び flutter doctor を実行し、状況を確認します。iOS Simulator のランタ
イムがインストールされていない場合は、以下のように Unable to get list of
installed Simulator runtimes.とメッセージが表示される可能性があります。
[!] Xcode - develop for iOS and macOS (Xcode 15.2)
    ✗ Unable to get list of installed Simulator runtimes.

 この場合は以下のコマンドを実行して iOS Simulator のランタイムをインス
トールします。
# iOS Simulatorのランタイムをインストール
$ xcodebuild -downloadPlatform iOS

 再び flutter doctor を実行し、状況を確認します。以下のように CocoaPods

                                                                                     9
第
    1 環境構築とアプリの実行
         章
             Flutter SDK、Android Studio、Xcode




             がインストールされていない旨のメッセージが表示された場合は、CocoaPods
             のインストールを実行します。
              [!] Xcode - develop for iOS and macOS (Xcode 15.2)
                  ✗ CocoaPods not installed.

               CocoaPods は iOS アプリ開発で用いられる Ruby 製のパッケージ管理ツールで
             す。macOS 標準の Ruby を用いる場合は以下のコマンドでインストールします
             （Tips 参照）
                     。
              # CocoaPodsをインストール
              $ sudo gem install cocoapods

               CocoaPods のインストールが完了したら、flutter doctor で状況を確認し
             ます。以下のようにチェックが付けば iOS の開発環境のインストールは完了
             です。

              [✓] Xcode - develop for iOS and macOS (Xcode 15.2)




                Tips Xcodeのバージョンを使い分けるインストールのしかた
                   Mac App Store から Xcode をインストールした場合は、新しいバージョンの
                Xcode がリリースされると上書きアップデートされます。実際のアプリ開発では
                複数バージョンの Xcode の使い分けが必要なこともあり、上書きアップデートが
                問題になるケースもあります。このようなケースに対応するため、筆者は Apple
                の開発者向けサイト注 a から Xcode をダウンロードする方法を取っています。
                   ダウンロードした Xcode は /Applications 配下に配置しておきましょう。

                注a     https://developer.apple.com/download/applications/




                Tips CocoaPodsがインストールできない場合
                   macOS 標準の Ruby のバージョンでは CocoaPods がインストールできない場
                合があります。そのようなときの対処法の一例を紹介します。
                   Ruby のバージョン管理ツールである rbenv を使って Ruby のバージョンを上
                げます。まず、rbenv をインストールするためのパッケージマネージャである
                Homebrew を用いてインストールします。Homebrew のインストールに関する
                詳細は公式 Web サイト注 a に記載があります。




                注a     https://docs.brew.sh/Installation


    10
                                                                 Flutterの環境構築   1.2


# Homebrewをインストール
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/ins
tall/HEAD/install.sh)"
# Homebrewにパスを通す
$ echo "export PATH=\"\$PATH:/opt/homebrew/bin\"" >> ~/.zshenv
# 実行中のシェルにパスを適用
$ . ~/.zshenv


 続いて、rbenv をインストールします。

# rbenvをインストール
$ brew install rbenv ruby-build
# rbenvにパスを通す
$ echo "eval \"\$(rbenv init - zsh)\"" >> ~/.zshrc
# 実行中のシェルにパスを適用
$ . ~/.zshrc

 rbenv を使って Ruby をインストールします。今回は 2.7.5 をインストールし
ます。

# バージョン2.7.5のRubyをインストール
$ rbenv install 2.7.5
# グローバルのRubyのバージョンを2.7.5に設定
$ rbenv global 2.7.5

 以下のコマンドで Ruby のバージョンを確認しましょう。

# Rubyのバージョンを出力
$ ruby --version


 バージョン 2.7.5 が適用されていない場合はターミナルを再起動してください。
 続いて、CocoaPods をインストールします。

# CocoaPodsをインストール
$ gem install cocoapods


 以下のコマンドで CocoaPods のバージョンを確認しましょう。

# CocoaPodsのバージョンを出力
$ pod --version


 無事にバージョンが表示されれば完了です。




                                                                                 11
第
    1 環境構築とアプリの実行
         章
             Flutter SDK、Android Studio、Xcode




               Android Studioの設定 ── Flutterと親和性の高いIDE
               Flutter アプリの開発には Android Studio、IntelliJ IDEA や Visual Studio Code
             （以降、VS Code）がよく用いられます。これらの IDE にはプラグインが提供さ
             れており、コード補完やデバッグ、ステップ実行などの機能が利用できます。
               本書では環境構築の過程で Android Studio をインストールしているので、
             Android Studio を中心に解説していきます（VS Code も軽量で扱いやすく筆者
             は気に入っています）。
               Android Studio でプラグインをインストールするには、アプリケーションメ
             ニューから「Settings」を選択します。Settings ウィンドウの検索窓に「Plugins」
             と入力し、ツリーの中から「Plugins」を選択します（図 1.4）。「Marketplace」タ
                   「Flutter」というキーワードでプラグインを検索します。Flutter
             ブを開いたら、
             プラグインが見つかったらインストールボタンを押します。Flutter プラグイ
             ンと併せて Dart プラグインも同時にインストールされます。
               インストールが完了したら Android Studio を再起動しましょう。

             図 1.4    Settings ウィンドウ




    12
                                                        fvmによるFlutterのバージョン管理       1.3


 1.3
 fvmによるFlutterのバージョン管理

 プロジェクトごとに Flutter のバージョンを切り替えることができる fvm と
いうツールを紹介します。fvm を利用することで、Flutter のバージョンを切
り替えるために Flutter SDK を再インストールする手間を省くことができま
す。「過去に開発した Flutter アプリをメンテナンスするために、古いバージ
ョンの Flutter を入れなおす……」といった面倒ごとから解放されます。



 fvmのインストール
 まず fvm をインストールするために、macOS 向けのパッケージ管理ツール
Homebrew をインストールします。CocoaPods のインストール時に Homebrew
を導入した場合はこの手順は不要です。

# Homebrewをインストール
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/H
EAD/install.sh)"
# Homebrewにパスを通す
$ echo "export PATH=\"\$PATH:/opt/homebrew/bin\"" >> ~/.zshenv
# 実行中のシェルにパスを適用
$ . ~/.zshenv


 次に Homebrew を利用して fvm をインストールします。

# fvmのGitHubリポジトリをHomebrewに追加
$ brew tap leoafarias/fvm
# fvmをインストール
$ brew install fvm


 これで fvm のインストールは完了です。



 fvmを利用したFlutterのインストール
 続いて、fvm を利用して最新安定版の Flutter およびそれに対応した Dart の
環境をインストールしましょう。インストール可能な Flutter バージョンをタ
ーミナルから確認します。



                                                                                     13
第
    1 環境構築とアプリの実行
         章
             Flutter SDK、Android Studio、Xcode




             # インストール可能なFlutterバージョンを出力
             $ fvm releases

                 stable と書かれたバージョンが最新の安定版となります。執筆時点のコマ
             ンド実行結果を以下に示します。最新の安定版は 3.16.9 でした。

             .
             .
             .
             （省略）
             Nov 30 23     │ 3.16.2
             Dec 5 23      │ 3.18.0-0.1.pre
             Dec 6 23      │ 3.16.3
             Dec 13 23     │ 3.16.4
             Dec 14 23     │ 3.18.0-0.2.pre
             Dec 20 23     │ 3.16.5
             Jan 10 24     │ 3.16.6
             Jan 10 24     │ 3.19.0-0.1.pre
             Jan 11 24 │ 3.16.7
             Jan 17 24 │ 3.16.8
             Jan 18 24 │ 3.19.0-0.2.pre
             --------------------------------------
             Jan 25 24 │ 3.16.9             stable
             --------------------------------------
             --------------------------------------
             Jan 26 24 │ 3.19.0-0.3.pre     beta
             --------------------------------------


                 それではバージョン 3.16.9 の Flutter をインストールします。
             # バージョン3.16.9のFlutterをインストール
             $ fvm install 3.16.9

                 これで Flutter のインストールは完了です。
                 後述の「1.4 プロジェクトの作成」の節で、プロジェクトで利用する fvm の
             Flutter のバージョンを指定する方法を解説します。その設定が完了すると、
             プロジェクトのディレクトリ配下で fvm コマンドを介して Flutter を使用する
             ことができます。たとえば、Flutter のバージョン番号を確認するには以下の
             ように実行します。

             # fvmを経由してFlutterのバージョンを出力
             $ fvm flutter --version
             # fvmを経由してDartのバージョンを出力
             $ fvm dart --version

             「1.2 Flutter の環境構築」の節でインストールした Flutter はそのまま残って

    14
