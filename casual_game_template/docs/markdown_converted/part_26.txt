                                 開発するアプリの概要   6.1

図 6.2   スタート画面




  画像選択画面
  スマートフォンの画像ライブラリから画像を選択する画面です（図 6.3）。「画
像を選ぶ」
    ボタンをタップすると画像ライブラリから画像を選択でき、選択し
た画像はプレビューされます。画像ライブラリへのアクセスは image_picker
というパッケージを使用します。また、画像のプレビューのために image パ
ッケージを使用します。「画像を編集する」ボタンをタップすると画像編集画
面に遷移します。




                                              183
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




              図 6.3   画像選択画面




                画像編集画面
                選択した画像を回転、反転させる画面です（図 6.4）
                                         。画像の回転は 90 度単
              位で行います。画像の回転、反転には image パッケージを使用します。

              図 6.4   画像編集画面




    184
                                                プロジェクトを作成する     6.2


  開発の土台づくり
  第 4 章で解説した「開発の土台づくり」の要素です。アプリは日本語にロー
カライズし、アセットは flutter_gen パッケージを使用して管理します。環境
変数は特に設定しません。
  導入するパッケージは表 6.1 のとおりです。

表 6.1   導入するパッケージ一覧

パッケージ名               用途
intl                 アプリのローカライズ
image_picker         画像ライブラリへのアクセス
image                画像データの加工
flutter_svg          SVG 画像の表示
build_runner         flutter_gen のコード生成
flutter_gen_runner   アセットの管理




  テーマと画面遷移の方針
  テ ー マ は Material Design 3 の テ ー マ を 使 用 し ま す。テ ー マ の 変 更 は
ColorScheme クラスの seedColor のみを変更するにとどめます。
  画面遷移は Navigator 1.0 の API のみを使用します。



  6.2
  プロジェクトを作成する

  新たにプロジェクトを作成します。第 1 章の「1.1 プロジェクトの作成」
                                      で示
した手順に従って、プロジェクトを作成してください。プロジェクト名は
「edit_snap」としましょう。プロジェクト作成直後は lib/main.dart にテンプ
レートになるアプリコードが書かれていますので、不要なコードを削除して
しまいましょう。

 ./lib/main.dart
 import 'package:flutter/material.dart';

 void main() {



                                                                185
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




                  runApp(const MyApp());
              }

              class MyApp extends StatelessWidget {
                  const MyApp({super.key});

                  @override
                  Widget build(BuildContext context) {
                    return MaterialApp(
                        // Androidのタスクマネージャーに表示されるアプリ名
                        // iOSでは使用されません
                        title: 'Edit Snap',
                        theme: ThemeData(
                           colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                           useMaterial3: true,
                        ),
                        home: Container(),
                      );
                  }
              }




                  開発の土台づくり
                  本来であれば、開発をスタートするこの段階でアプリのローカライズやア
              セット管理のしくみを整えておくことが望ましいです。しかし、本章では各
              種しくみの導入前後の違いを比較しやすいよう、後工程で導入することにし
              ます。



                  6.3
                  アプリ起動後のスタート画面を作成する

                  アプリ起動後に表示されるスタート画面を作成します。スタート画面のコ
              ードを記述するファイルを作成します。Android Studio の左側にある Project
              ビューで lib フォルダを右クリックし、「New」➡「Dart File」を選択します。フ
              ァイル名を入力するダイアログが表示されるので、「start_screen」と入力して
              「OK」ボタンをクリックします。
                  ひとまず、スタート画面は中央に文字を表示するだけのシンプルなものに
              しておきます。

    186
                                                        アプリ起動後のスタート画面を作成する    6.3

./lib/start_screen.dart
import 'package:flutter/material.dart';

class StartScreen extends StatelessWidget {
    const StartScreen({super.key});

    @override
    Widget build(BuildContext context) {
        return Scaffold(
          body: Center(
             child: Text('Start Screen'),
          ),
        );
    }
}



    続いて、アプリ起動後にスタート画面が表示されるように main.dart を修
正します。

./lib/main.dart
import 'package:edit_snap/start_screen.dart';      ❶
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});


    @override
    Widget build(BuildContext context) {
      return MaterialApp(
        // Androidのタスクマネージャーに表示されるアプリ名
        // iOSでは使用されません
        title: 'Edit Snap',
        theme: ThemeData(
           colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
           useMaterial3: true,
        ),
        home: const StartScreen(),     ❷
        );
    }
}


    先ほど実装した StartScreen ウィジェットを参照するため、start_screen.

                                                                              187
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




              dart をインポートしました（❶）。MaterialApp ウィジェットの home パラメー
                                    （❷）。ここでアプリを実行すると、図 6.5
              タに StartScreen 画面を渡しました
              のようにスタート画面が表示されます。

              図 6.5    スタート画面




                レイアウトを作成する
                スタート画面のレイアウトを作成していきます。Android Studio で start_
              screen.dart を開き、StartScreen クラスの build メソッドを以下のように修
              正します。

               ./lib/start_screen.dart
              import 'package:flutter/material.dart';


              class StartScreen extends StatelessWidget {
                const StartScreen({super.key});

                 @override
                 Widget build(BuildContext context) {
                   return Scaffold(
                     appBar: AppBar(
                        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
                                                                                         ❶
                        title: const Text('Edit Snap'),
                      ),
                      body: Center(



    188
                                                          アプリ起動後のスタート画面を作成する   6.3

             child: Column(
               mainAxisAlignment: MainAxisAlignment.center,
               children: [
                  Text(
                    'こんにちは！\n今日は${DateTime.now()}です。',
                                                                ❷
                    textAlign: TextAlign.center,
                  ),
                  ElevatedButton(
                    child: const Text('開始する'),
                                                    ❸
                    onPressed: () {},
                  ),
               ],
             ),
          ),
        );
    }
}


    上 部 に AppBar ウ ィ ジ ェ ッ ト（❶）が あ り、Text ウ ィ ジ ェ ッ ト（❷）と
                    （❸）が垂直方向に並ぶ画面です。❷と❸を垂直
ElevatedButton ウィジェット
方向に並べるために Column ウィジェットで囲みました。これを実行すると、
iOS Simulator 上で図 6.6 のように表示されます。

図 6.6        レイアウト作成後のスタート画面




                                                                               189
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




                  6.4
                  テーマをアレンジする

                  アプリのテーマを好みにアレンジしてみましょう。MaterialApp ウィジェ
              ットに渡す theme パラメータを変更します。

              ./lib/main.dart
              // 省略
              class MyApp extends StatelessWidget {
                const MyApp({super.key});


                  @override
                  Widget build(BuildContext context) {
                      return MaterialApp(
                        title: 'Edit Snap',
                        theme: ThemeData(
                           colorScheme: ColorScheme.fromSeed(seedColor: Colors.teal),   ❶
                           useMaterial3: true,
                        ),
                        home: const StartScreen(),
                      );
                  }
              }


                  ColorScheme クラスのコンストラクタに渡す seedColor パラメータを変更し
              ました（❶）
                   。再びアプリを実行するとテーマが変更され、AppBar ウィジェッ
              トや ElevatedButton ウィジェットの色が変わります。



                  6.5
                  アプリを日本語化する

                  アプリ内で表示する文字列を日本語化し、arb ファイルでメッセージを管理
              します。各コードのより詳しい説明は第 4 章を参照してください。



                  パッケージを導入する
                              （flutter_localizations と intl）
                  まずはパッケージを 2 つ                            を導入します。プロジェ
              クトのディレクトリで、ターミナルから以下のコマンドを実行してください。

    190
