                                                        状態を持つウィジェット ── StatefulWidget   3.3

    );
}

class Counter extends StatefulWidget {

    const Counter({super.key});

                                                           ❶
    @override
    State<Counter> createState() => _CounterState();
}

class _CounterState extends State<Counter> {


    int _count = 0;

    @override
    Widget build(BuildContext context) {         ❷
        return GestureDetector(
           onTap: () {
              print('tapped!');
           },
           child: Container(
              color: Colors.red,
              width: 100,
              height: 100,
              child: Center(
                 child: Text(
                    '$_count',
                    textDirection: TextDirection.ltr,
                 ),
              ),
           ),
        );
    }
}



    Counter ウィジェットを StatefulWidget に書き換えました。StatefulWidget は
build メソッドを持ちません。代わりに createState メソッドをオーバーライ
ドし State オブジェクトを返します（❶）。build メソッドは State クラスで実
装します（❷）。State クラスは状態が変化したことをフレームワークに知ら
せる setState() というメソッドを持っており、このメソッドを呼び出すと
build メソッドが呼び出されるしくみになっています。




                                                                                        103
第
    3 フレームワークの中心となるWidgetの実装体験
          章
              StatelessWidget、StatefulWidget




                  Widgetの状態を変化させる
                  それでは _count の値を変化させ、それに追従して build メソッドが呼び出
              されるように修正してみます。

              import 'package:flutter/material.dart';

              void main() {
                  runApp(
                    const Center(
                      child: Counter(),
                    ),
                  );
              }

              class Counter extends StatefulWidget {


                  const Counter({super.key});

                  @override
                  State<Counter> createState() => _CounterState();
              }


              class _CounterState extends State<Counter> {

                  int _count = 0;

                  @override
                  Widget build(BuildContext context) {
                    return GestureDetector(
                      onTap: () {
                         print('tapped!');
                         setState(() {
                           _count += 1;    ❶
                         });
                      },
                      child: Container(
                         color: Colors.red,
                         width: 100,
                         height: 100,
                         child: Center(
                           child: Text(
                             '$_count',
                             textDirection: TextDirection.ltr,
                            ),
                         ),


    104
                                                     まとめ   3.4

          ),
        );
    }
}


    onTap に渡すコールバックの中で、setState の呼び出しと _count の変更を
実装しました（❶）。setState は引数にクロージャで _count の変更処理を渡し
ています。このように、状態を変更するときは setState の引数で行います。
    このサンプルコードを実行すると、赤い四角形をタップするたびに数字が
更新されカウントアップします。



    3.4
    まとめ

    StatelessWidget と StatefulWidget について、それぞれの特徴をあらためてお
さらいします。

・StatelessWidget の特徴
 ・状態を持たない
 ・build メソッドをオーバーライドし、1 つ以上の Widget を組み合わせて UI を構成
   する
 ・自身で表示更新するしくみがない
・StatefulWidget の特徴
 ・StatefulWidget は State を生成する
 ・StatelessWidget にあった build メソッドは State で実装する
 ・状態を変化させるときは setState の引数コールバック内で行う
 ・setState を呼び出すと自身の表示更新が行われる

    シンプルなアプリであれば、StatelessWidget と StatefulWidget の組み合わせ
でだけで開発することができます。アプリが複雑になり、ウィジェットの更
新や状態の受け渡しに課題が見えてきたときは、状態管理について検討する
とよいでしょう。第 7 章でその考え方や代表的な手法を解説します。




                                                           105
       第



アプリの日本語化対応、
           4   章




アセット管理、環境変数




                   107
第
    4 アプリの日本語化対応、アセット管理、環境変数
          章




                本章では国際化対応、アイコンなどのアセット管理のしくみ、環境変数の
              取り扱いについて解説します。特に製品レベルのアプリを開発する際には、
              はじめに整えておくべき要素であり、さしずめ「開発の土台作り」
                                           と言えます。
                また、これらの要素を整えるために必要なパッケージ管理についても併せ
              て解説します。



                4.1
                パッケージやツールを導入する

                Dart 言語は標準でパッケージ管理ツールを提供しており、Flutter のプロジ
              ェクトで利用することができます。まず、混乱のないよう用語の解説を表 4.1
              にまとめたので確認してください。

              表 4.1      パッケージに関する用語

              用語                        解説
              パッケージ                     Dart のプログラムライブラリ、アプリ、リソースなどを含んだデ
                                        ィレクトリ。パッケージそのものや依存関係を記述した pubspec
                                        ファイルが必ず含まれる
              プラグイン                     ネイティブコード（iOS 向けの Swift コードや Android 向けの Kotlin
                                        コードなど）を同梱したパッケージ
              pub                       パッケージ管理ツール。パッケージを入手するために使う
              pub.dev                   共有パッケージを閲覧、検索できる Web サイト。https://pub.dev
              Flutter Favorite Program 「最初に導入を検討すべきパッケージ」を選出する活動のこと。pub.
                                        dev で公開されている


                pub.dev 注 1 にはたくさんのパッケージが公開されています。サードパーティ
              のプログラムライブラリのみならず、Flutter が公式で提供するパッケージも
              あります。カメラ操作、データ永続化、Firebase 連携など、pub.dev でパッケ
              ージを検索することで多くのユースケースに対応できるでしょう。本章でも
              後述のアセット管理のところで便利なパッケージを紹介します。
                多くのパッケージは pubspec.yaml に所定の記述をし、コマンドを実行する
              ことで導入できます。ただし、導入に必要な手順はパッケージにより異なり
              ますので、必ずそれぞれのドキュメントを参照してください。




              注1      https://pub.dev


    108
                                         パッケージやツールを導入する     4.1


 パッケージの導入方法
 pubspec.yaml にはパッケージを記述するセクションが 2 種類あります。以
下にサンプルを示します。

dependencies:
  flutter:
    sdk: flutter             ❶
  cupertino_icons: ^1.0.2
  http: ^0.13.6

dev_dependencies:
  flutter_test:
    sdk: flutter             ❷
  flutter_lints: ^2.0.0
  build_runner: ^2.3.3


 dependencies セクションはアプリのコードが依存するパッケージを記述し
 （❶）
ます  。dev_dependencies は開発フェーズでのみ利用するパッケージを記
述します。たとえばテストに関わるパッケージや、コード生成ツールなどで
す（❷）
   。
 依存するパッケージを追加するには、YAML（YAML Ain't Markup Language）
ファイルを直接編集するか、コマンドを実行します。たとえば、http という
パ ッ ケ ー ジ を 導 入 す る 場 合 は、以 下 の よ う に コ マ ン ド を 実 行 す る と
dependencies セクションに http パッケージが追加されます。

$ flutter pub add http


 dev_dependencies セクションに追加する際は --dev オプションを付与しま
す。たとえば、build_runner というパッケージを導入する場合は、以下のよ
うにコマンドを実行します。

$ flutter pub add --dev build_runner


 こうして pubspec.yaml にパッケージを追加したら、コマンドを実行してパ
ッケージを導入します。

$ flutter pub get


 または Android Studio には pub get コマンドを実行するためのボタンが用意
                            「Pub get」
されています。pubspec.yaml を開いている状態で        ボタンを押すとパ

                                                            109
第
    4 アプリの日本語化対応、アセット管理、環境変数
          章




                        （図 4.1）。
              ッケージを導入できます

              図 4.1   Android Studio の「Pub get」ボタン




                パッケージバージョンの指定方法
                パッケージのバージョン指定には次のような記述方法があります。

              # 2.1.0以上、互換性のある限り最新のバージョンを利用する
              shared_preferences: ^2.1.0 ❶


              # 2.1.0以上 3.0.0未満のバージョンを利用する
              shared_preferences: '>=2.1.0 <3.0.0' ❷


              # 2.1.0以下のバージョンを利用する
              shared_preferences: '<=2.1.0' ❸


              # 2.0.0より新しいバージョンを利用する
              shared_preferences: '>2.0.0' ❹


              # バージョンを2.1.1に固定する
              shared_preferences: 2.1.1 ❺



    110
