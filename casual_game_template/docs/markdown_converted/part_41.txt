                                                                   高速で保守性の高い実装   10.2

class CounterText extends ConsumerWidget {
    const CounterText({super.key});
    @override
    Widget build(BuildContext context, WidgetRef ref) {
        final counter = ref.watch(counterProvider);
        return Text(                                           ❷
          '$counter',
          style: Theme.of(context).textTheme.headlineMedium,
        );
    }
}


    カウンタの状態を表示するウィジェットを CounterText ウィジェットとし
て切り出しました（❷）。HomeScreen 画面の build メソッドではカウンタの監
視は行われなくなりました（❶）。
    このサンプルを実行すると、カウンタをインクリメントすると HomeScreen
画面の build メソッドは呼ばれず、CounterText ウィジェットの build メソッ
ドのみが呼ばれることが確認できます。ウィジェットの再構築範囲が小さく
なり、カウンタの値を表示するウィジェットとして CounterText ウィジェッ
トは再利用性のあるクラスとなりました。




    Tips アプリのパフォーマンスを計測する
        高速なアプリに仕上がっているかどうかを確認する際は以下の点に注意しま
    しょう。

    ・Profile モードでアプリを実行すること
    ・シミュレータなどは使用せず、実機でアプリを実行すること

        Debug ビルドした Flutter アプリはアサーションの処理が含まれています。ま
    た、ビルド方式もまったく異なるため Release ビルドしたアプリよりも遅い可
    能性が高いです。Profile モードはほぼ Release ビルドと同等のパフォーマンス
    を発揮し、さらに最低限のデバッグ情報を含んでいるため、パフォーマンス計
    測に適しています。
        シミュレータやエミュレータもパフォーマンスの特性が異なるため計測には
    向きません。サポート対象とする端末の中でも、性能の低いものを選択し、実
    機計測するのが良いとされています。


                                                                                 303
第
    10 高速で保守性の高いアプリを開発するためのコツ
          章




              10.3
               まとめ

               パフォーマンスを意識した実装は、ときとして保守性を下げることにつな
              がります。本章ではアプリのパフォーマンスとプログラムの保守性、どちら
              も両立させるポイントに絞って紹介しました。Flutter アプリを開発する際は、
              本章の内容をいつも頭の片隅に置いて設計を行ってみてください。




    304
         第
             11
  Flutterアプリ開発に
                  章




必要なネイティブの知識




                      305
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




               Flutter でのアプリ開発において、欠かせない iOS/Android ネイティブの知
              識を紹介します。アプリの ID 設定、ビルド署名などは一度設定してしまうと
              繰り返し触れることはないので、知識として定着しづらい部分かもしれませ
              ん。困ったときに本章が参考になれば幸いです。



               11.1
               ネイティブAPIのバージョンと
               最低サポートOSのバージョン

               Flutter を iOS アプリ、Android アプリとしてビルドする際に、ネイティブ側
              で指定する OS や SDK バージョンによって挙動が変わることがあります。少々
              ややこしいので、この部分を整理しておきます。
               指定する OS と SDK のバージョンは大きく 2 つ（Android は 3 つ）あります。

              ・最低サポート OS のバージョン
              ・ビルド SDK バージョン
              ・ターゲット SDK バージョン
                             （Android のみ）




               最低サポートOSのバージョン
               最低サポート OS のバージョンは、アプリをインストールできる最低の OS
              バージョンです。このバージョンを低く保つことでより多くのユーザーがア
              プリを利用できることになりますが、その分古い OS での挙動についても考慮
              する必要があります。
               iOS については Apple のデベロッパーサイト注 1 にてバージョン別のシェアが
              公開されており、この数値を参考にするとよいでしょう。
               Android については Android Studio の新規プロジェクト作成時にバージョン
              別のシェアを確認することができます。アプリケーションメニューから「File」
              ➡「New」
                   ➡「New Project」を選択します。テンプレートの選択画面は何を選ん
              でもかまいません（図 11.1）。ここでは「No Activity」を選択し「Next」をクリッ
              クします。


              注1   https://developer.apple.com/support/app-store/


    306
                         ネイティブAPIのバージョンと最低サポートOSのバージョン   11.1

図 11.1   テンプレート選択画面




  プロジェクトの設定画面にて、「Help me choose」をクリックします（図
11.2）。

図 11.2   新規プロジェクトの設定画面




                                                         307
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




                すると、Android の OS バージョン別のシェアが表示されます（図 11.3）。

              図 11.3   Android のバージョン別シェア画面（2023 年 7 月時点）




              iOSの最低サポートOSバージョンを設定する
                iOS アプリの最低サポート OS バージョンを設定する際は Xcode で行うのが
              よいでしょう。ios/Runner.xcworkspace を Xcode で開きます。左側のナビゲ
              ーターから「Runner」を選択し、「Runner」プロジェクトを選択します。「Build
              Settings」タブを選択し、「iOS Deployment Target」を変更します。




                 Tips XcodeのBuild Settings
                   Xcode プロジェクトの Build Settings は階層構造になっています。具体的に
                 はプロジェクト全体の設定と、アプリ側の設定があり継承関係にあります。プ
                 ロジェクト全体設定を変更しても、アプリ側でオーバーライドされていると、
                 変更は反映されません。図 A の「PROJECT」と「TARGETS」がそれぞれプロジェ
                 クト全体の設定とアプリ側の設定になります。




    308
                          ネイティブAPIのバージョンと最低サポートOSのバージョン   11.1


図A   プロジェクトの設定とアプリの設定
●プロジェクト全体の設定




●アプリの設定




 Build Settings のところで太字になっているものが明示的に指定されている
ものになります。図 A では、プロジェクト全体の iOS Deployment Target（図 A


                                                          309
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




                の上）は「iOS 12.0」が太字になっており明示的に指定されています。
                   一方、アプリ側の iOS Deployment Target（図 A の下）は太字になっておらず、
                プロジェクト全体の設定を継承しているということになります。




              Androidの最低サポートOSバージョンを設定する
               Android アプリの最低サポート OS バージョンはアプリのビルド構成ファイ
              ル android/app/build.gradle に記述します。android フォルダにも android/
              build.gradle が存在しますが、こちらはプロジェクト全体の構成ファイルな
              ので間違えないように注意してください。android エントリ、defaultConfig
              内の minSdkVersion が最低サポート OS バージョンになります。
               必要な部分だけを抜粋すると以下のようになります。

               ./android/app/build.gradle
              android {
                  defaultConfig {
                      minSdkVersion 26
                  }
              }




               ビルドSDKバージョン
               ビルド SDK バージョンはその名のとおりビルド時に使用する SDK のバージ
              ョンで、このバージョンを上げることで新しいネイティブ API を利用するこ
              とができます。ただし、このバージョンを上げると古い OS で挙動が変わるこ
              とがありますので注意が必要です。この挙動の変化は特に Android に多く見
              られます。


              iOSのビルドSDKバージョンの設定
               iOS には実はビルド SDK バージョンという考え方はありません。Xcode の
              バージョンによって使用できる API が変わります。Xcode のバージョン変更
              により、Flutter アプリの挙動が大きく変わることはまれですが、バージョン
              を上げる際は慎重に動作確認しましょう。


              AndroidのビルドSDKバージョンの設定
               Android のビルド SDK バージョンはアプリのビルド構成ファイル android/

    310
