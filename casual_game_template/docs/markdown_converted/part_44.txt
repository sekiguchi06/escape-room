                                       アプリの配布とコード署名   11.3

❶開発者がキーストアを作成する
❷開発者が❶のキーストアを使い、アプリに署名をする
❸署名済みの❷のアプリを Google Play Console にアップロードする
❹ Google Play Console がアプリの署名を検証する
❺ Google Play Console が生成・管理するキーストアでアプリを再署名する
❻再署名済みのアプリを Google Play Store に配布する


 ❶で作成したキーストアの秘密鍵をアップロード鍵、❺で Google Play
Console が生成・管理するキーストアの秘密鍵をアプリ署名鍵と呼びます。
 Android はアプリをアップデート（新しいバージョンのアプリを上書きイン
ストール）する際に、同じ証明書で署名されている必要があります。証明書を
紛失してしまうと、アプリのアップデートができなくなってしまいます。そ
のため、ユーザーの手もとで検証される証明書を Google Play Console がクラ
ウド上で管理することで、リスクを軽減しているのです。
 手順が非常に多いように見えますが、実際には Android Studio の GUI を使
って簡単に行うことができます。



 apkファイルとaabファイル
 Android のプロジェクトは、apk ファイルと aab ファイルの 2 種類のファイ
ルを生成することができます。インストール可能なアプリのファイル形式は
apk ファイルです。aab は Android App Bundle の略で、そのままではインスト
ールできません。aab はコンパイル済みのコードとリソースをすべて内包し
たファイルで、インストールする端末向けに aab から最適化した apk ファイル
を生成することができます。
 Google Play で公開するアプリは、aab の形式でのアップロードしかサポー
トされていません。Google Play Console が aab ファイルを apk ファイルに変
換、その際にアプリ署名鍵で署名を行い、ユーザーの端末にインストールさ
れるのです。


アプリに署名する
 それでは、アップロード鍵の生成とアプリへの署名手順を解説します。
Android Studio を使うと簡単に行えます。
 プロジェクトルート直下の android ディレクトリを Android Studio で開きま

                                                      327
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              す。アプリケーションメニューの「Build」➡「Generate Signed Bundle/APK」を
              選択します。
                     「Android App Bundle」を選択し、「Next」
                ダイアログで                              をクリックします（図
              11.16）
                   。

              図 11.16   ファイル形式の選択ダイアログ




                次の画面で「Create new...」を選択し、アップロード鍵を生成します（図
              11.17）。

              図 11.17   署名設定のダイアログ




    328
                                     アプリの配布とコード署名   11.3

  図 11.18 のダイアログの上部から、「Key store path:」にはキーストアの保存
先を指定します。ファイルの拡張子は「.jks」を指定します。「Password:」と
「Confirm:」にはキーストアのパスワードを入力します。「Alias:」には鍵を識別
する任意の名前を入力します。その下の「Password:」と「Confirm:」には先ほど
のキーストアのパスワードと同じものを入力します。「Validity (years):」は鍵
の有効期限を指定します。25 年以上が推奨されています。「Certificate」には
証明書の所有者情報を入力します。ストアで公開されることはありませんが、
証明書の情報としてアプリに組み込まれます。
 「OK」
    をクリックすると、キーストアが生成されます。

図 11.18   キーストア作成ダイアログ




  もとのダイアログ（図 11.17）に戻ったら「Next」をクリックします。
  次の画面では「release」を選択し、「Create」       （図 11.19）
                              をクリックします        。
  ビルドが完了すると、android/app/release ディレクトリに aab ファイルが
生成されます。




                                                    329
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              図 11.19   ビルドバリアントの選択ダイアログ




              aabファイルをアップロードする
                実際に aab ファイルを Google Play Console にアップロードし、処理される様子
              を見てみましょう。aab ファイルをアップロードするために、Google Play Console
              でアプリの情報登録などの操作が必要になりますが、その操作については駆け足
              で説明します。本項はアプリの署名にフォーカスした内容のためご容赦ください。
                Google Play Console にログインし、右上の「アプリを作成」をクリックしま
              （図 11.20）
              す        。

              図 11.20   Google Play Console のトップ画面




    330
                                         アプリの配布とコード署名   11.3

  アプリの必要情報を入力し、「アプリを作成」      （図 11.21）
                      をクリックします        。

図 11.21   Google Play Console のアプリ作成画面




  左側のメニューに「製品版」のほか、「テスト」   「オープンテスト」
                        の配下に       や
「クローズド テスト」などがあります（図 11.22）。




                                                        331
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              図 11.22   Google Play Console のダッシュボード画面




               「製品版」は Google Play で公開中のバージョンを管理する画面です。アプリ
              「製品版」
              を    として公開する前にテスターに配布するなどの用途で「テスト」以
              下の項目を使います。今回はアップロードの動作を見ることを目的に「内部テ
                を選択します。「内部テスト」をクリックし、右上の「新しいリリースを
              スト」
              作成」      （図 11.23）。
                をクリックします




    332
                                          アプリの配布とコード署名   11.3

図 11.23   Google Play Console の内部テスト画面




  図 11.24 の画面で「署名鍵を選択」をクリックすると、署名鍵の選択ダイア
ログが表示されます（図 11.25）。「Google 生成の鍵を使用」を選択します。

図 11.24   Google Play Console のリリース作成画面




                                                         333
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              図 11.25   署名鍵の選択ダイアログ




                図 11.24 の画面に戻ったら「アップロード」をクリックすると、ファイル選
              択ダイアログが表示されますので、先ほど生成した aab ファイルを選択しま
              す。続いて「リリースの詳細」に必要事項を入力し、「次へ」
                                         をクリックします。
                右下の「保存して公開」をクリックすると、内部テストのリリースが作成さ
              れます。
                aab ファイルのアップロードが完了しました。これで先ほどアプリをビル
              ドする際に作成したキーストアがアップロード鍵として自動的に登録されま
              す。次回以降のアップロードでは、同じキーストアを使ってビルドしなけれ
              ばアップロード時にエラーとなります。



                11.4
                まとめ

                Flutter アプリを開発するうえで欠かせない iOS、Android ネイティブの知識
              を解説しました。Swift や Kotlin に触れずとも Flutter アプリを開発することは
              可能ですが、本章で紹介したアプリ ID や最低サポート OS バージョンの設定
              などは、欠かすことのできない知識です。
                また、アプリの署名に関しては、時にはネイティブアプリエンジニアも苦
              戦することのある難しいものと筆者は感じています。本章の内容が、みなさ
              んの Flutter アプリをリリースする一助になれば幸いです。

    334
