                                                                    アプリの状態を管理する   8.7

 ./lib/app_notifier_provider.dart
import 'dart:convert';

import 'package:hiragana_converter/app_state.dart';
import 'package:hiragana_converter/data.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';          ❶
import 'package:http/http.dart' as http;


part 'app_notifier_provider.g.dart';

@riverpod    ❷
class AppNotifier extends _$AppNotifier {        ❸
    @override
    AppState build() {
        return const Input();    ❹
    }

    void reset() {
      state = const Input();        ❺
    }

    Future<void> convert(String sentence) async {
      state = const Loading();    ❻


        final url = Uri.parse('https://labs.goo.ne.jp/api/hiragana');
        final headers = {'Content-Type': 'application/json'};
        final request = Request(
           appId: const String.fromEnvironment('appId'),
           sentence: sentence,
        );
        final response = await http.post(
           url,
           headers: headers,
           body: jsonEncode(request.toJson()),
        );
        final result = Response.fromJson(
           jsonDecode(response.body) as Map<String, Object?>,
        );

        state = Data(result.converted);    ❼
    }
}



                                              （❸）
    AppNotifier という名前の NotifierProvider を定義しました  。Provider
の宣言部分は riverpod_generator パッケージに生成させるため、@riverpod ア
ノテーションを付与しています（❷）。また、アノテーションを参照するため

                                                                                  255
第
    8 実践ハンズオン❷
          章
              ひらがな変換アプリを開発




              riverpod_annotation パッケージをインポートしています（❶）。
               初期状態を提供する build メソッドでは、Input オブジェクトを返すように
              しました（❹）
                    。これはアプリ起動時は入力状態であるためです。
               reset メソッドでは、Input オブジェクトを state に代入しています（❺）。
              これは変換結果を表示した後、再度入力状態に戻すときに呼び出すことを想
              定しています。
               convert メソッドは InputForm ウィジェットの「変換」
                                                 ボタンをタップしたと
              きに呼び出される処理を実装しています。❻で、state に Loading オブジェク
              トを代入し、アプリの状態を Web API のレスポンス待ちに変更しています。
              ❼で、state に Data オブジェクトを代入し、アプリの状態を Web API のレス
              ポンスを受け取った状態に変更しています。それ以外は先ほど InputForm ウ
              ィジェットに直接実装したコードと同じです。
               これでアプリの状態管理のしくみは整いました。



               8.8
               状態に応じて表示を切り替える

               最後に、アプリの状態に応じて表示を切り替える実装をします。



               レスポンス待ち状態のウィジェットを実装する
               Web API のレスポンス待ちの表示レイアウトを作成します。lib フォルダの
              配下に loading_indicator.dart という新しいファイルを追加し、以下のコー
              ドを記述します。

              ./lib/loading_indicator.dart
              import 'package:flutter/material.dart';


              class LoadingIndicator extends StatelessWidget {
                const LoadingIndicator({super.key});

                @override
                Widget build(BuildContext context) {
                  return const Center(
                    /* ◆ CircularProgressIndicator
                    回転アニメーションする円形のインジケータWidget */
                    child: CircularProgressIndicator(),

    256
                                                              状態に応じて表示を切り替える   8.8

        );
    }
}


    StatelessWidget を継承した LoadingIndicator ウィジェットを実装しました。
中央にインジケータを配置したシンプルなウィジェットです。



    変換完了状態のウィジェットを実装する
    次にひらがなへの変換結果を表示するためのウィジェットを実装します。
lib フォルダの配下に convert_result.dart という新しいファイルを追加し、
以下のコードを記述します。
./lib/convert_result.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hiragana_converter/app_notifier_provider.dart';


class ConvertResult extends ConsumerWidget {
  const ConvertResult({
    super.key,
    required this.sentence,    ❶
    });


    final String sentence;

    @override
    Widget build(BuildContext context, WidgetRef ref) {
      final notifier = ref.watch(appNotifierProvider.notifier);
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Text(sentence),    ❷
             ),
             const SizedBox(height: 20),
             ElevatedButton(

               onPressed: notifier.reset,   ❹
               child: const Text(
                                                 ❸
                  '再入力',
               ),
             ),


                                                                               257
第
    8 実践ハンズオン❷
          章
              ひらがな変換アプリを開発




                           ],
                        ),
                      );
                  }
              }

                  ConsumerWidget を継承した ConvertResult ウィジェットを実装しました。
              変換結果の文字列をコンストラクタ引数で受け取ります（❶）。受け取った変
              換結果の文字列は❷で表示します。また、テキスト入力画面に戻るためのボ
              タンを配置しました（❸）。ボタンタップ時のコールバックは AppNotifier の
              reset メソッドを呼び出しています（❹）。



                  画面の切り替えを行う
                  それでは、状態の変化にあわせて画面を切り替える挙動を実装していきま
              しょう。

              ./lib/main.dart
              import 'package:flutter/material.dart';
              import 'package:hiragana_converter/app_state.dart';
              import 'package:hiragana_converter/app_notifier_provider.dart';      ❶
              import 'package:hiragana_converter/convert_result.dart';
              import 'package:hiragana_converter/input_form.dart';
              import 'package:flutter_riverpod/flutter_riverpod.dart';
                                                                                   ❶
              import 'package:hiragana_converter/loading_indicator.dart';
              void main() {
                runApp(
                   const ProviderScope(
                      child: MyApp(),     ❷
                   ),
                );
              }

              class MyApp extends StatelessWidget {
                const MyApp({super.key});


                  @override
                  Widget build(BuildContext context) {
                    return MaterialApp(
                      title: 'Hiragana Converter',
                      theme: ThemeData(
                         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                         useMaterial3: true,
                      ),


    258
                                                                 状態に応じて表示を切り替える         8.8

          home: const HomeScreen(),
        );
    }
}

class HomeScreen extends ConsumerWidget {         ❸
    const HomeScreen({super.key});

    @override
    Widget build(BuildContext context, WidgetRef ref) {
      final appState = ref.watch(appNotifierProvider);       ❹
        return Scaffold(
          appBar: AppBar(
             backgroundColor: Theme.of(context).colorScheme.inversePrimary,
             title: const Text('Hiragana Converter'),
          ),
          body: switch (appState) {
             Loading() => const LoadingIndicator(),
             Input() => const InputForm(),                                          ❺
             Data(sentence: final sentence) => ConvertResult(sentence: sentence),
          },
        );
    }
}


                  （❶）、Riverpod を利用するため、アプリ
    まず必要なコードをインポートし
                               （❷）
のルートウィジェットを ProviderScope で包みました  。
    HomeScreen 画面を ConsumerWidget を継承するように修正しました（❸）。
ConsumerWidget を継承することで、build メソッドの第二引数に WidgetRef を
受け取れるようになります。WidgetRef から appNotifierProvider を購読し
（❹）、状態に応じて表示を切り替えるようにしました（❺）。表示の切り替え
は switch 式で行っています。



    ひらがな変換処理の呼び出しを修正する
    最後に、InputFormウィジェットの
                       「変換」
                          ボタンをタップしたときにAppNotifier
のconvertメソッドを呼び出すように修正します。




                                                                                        259
第
    8 実践ハンズオン❷
          章
              ひらがな変換アプリを開発




              ./lib/input_form.dart
              // import 'dart:convert';
              import 'package:flutter/material.dart';
              // import 'package:hiragana_converter/data.dart';
                                                                                    ❶
              // import 'package:http/http.dart' as http;
              import 'package:flutter_riverpod/flutter_riverpod.dart';
              import 'package:hiragana_converter/app_notifier_provider.dart';


              class InputForm extends ConsumerStatefulWidget {        ❷
                const InputForm({super.key});

                  @override
                  ConsumerState<InputForm> createState() => _InputFormState();      ❸
              }

              class _InputFormState extends ConsumerState<InputForm> {       ❹


                  final _formKey = GlobalKey<FormState>();
                  final _textEditingController = TextEditingController();


                  @override
                  Widget build(BuildContext context) {
                    return Form(
                      key: _formKey,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Padding(
                             padding: const EdgeInsets.symmetric(horizontal: 16),
                             child: TextFormField(
                                controller: _textEditingController,
                                maxLines: 5,
                                decoration: const InputDecoration(
                                   hintText: '文章を入力してください',
                                ),
                                validator: (value) {
                                   if (value == null || value.isEmpty) {
                                     return '文章が入力されていません';
                                   }
                                   return null;
                                },
                             ),
                          ),
                          const SizedBox(height: 20),
                          ElevatedButton(
                              onPressed: () async {
                                final formState = _formKey.currentState!;


    260
                                                                    状態に応じて表示を切り替える   8.8

                    if (!formState.validate()) {
                        return;
                    }
                    final sentence = _textEditingController.text;
                    await ref
                                                                     ❺
                        .read(appNotifierProvider.notifier)
                          .convert(sentence);
                  },
                  child: const Text(
                    '変換',
                  ),
               ),
             ],
          ),
        );
    }

    @override
    void dispose() {
      _textEditingController.dispose();
      super.dispose();
    }
}

    InputForm ウィジェットを ConsumerStatefulWidget を継承するように修正
   （❷）
しました  。これに伴って、_InputFormState クラスを ConsumerState を継
承するように修正しました（❹）。InputForm ウィジェットの createState メソ
ッドの戻り値の型も変更します（❸）
                。必要なコードをインポートし、不要に
なったインポートの削除も行っておきましょう（❶）。
    _InputFormState クラスが ConsumerState を継承したため、WidgetRef にア
              「変換」ボタンのタップ時に WidgetRef から
クセスできるようになりました。
                                          （❺）
AppNotifier を取得し、convert メソッドを呼び出すように変更しました  。
    これでアプリの状態に応じて表示を切り替える挙動が実装できました。ア
プリを実行し、入力文字をひらがなに変換すると一覧の画面に遷移すること
を確認してください。




                                                                                     261
第
    8 実践ハンズオン❷
          章
              ひらがな変換アプリを開発




               8.9
               まとめ

               入力したテキストをひらがなに変換するアプリを開発しました。文字入力
              とバリデーション、Web API のリクエストや JSON の取り扱いといった実践的
              な機能を盛り込みました。
               また、このハンズオンのポイントは次の 2 つです。

              ・アプリの状態を sealed class で実装し、簡潔にアプリの状態を表現した
              ・アプリの状態管理に Riverpod を利用し、ウィジェットとロジックを分離した

               このハンズオンで採用したアプリの状態表現や状態管理は、筆者お勧めの
              設計パターンの一つです。




    262
