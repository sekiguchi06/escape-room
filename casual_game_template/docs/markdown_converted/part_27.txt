                                                        アプリを日本語化する   6.5

# flutter_localizationsパッケージを導入
$ flutter pub add flutter_localizations --sdk=flutter
# intlパッケージを導入
$ flutter pub add intl:any


 次に pubspec.yaml を開き、以下のように追記します。

./pubspec.yaml


＃ 省略

flutter:
  uses-material-design: true
  generate: true    ❶


 コードジェネレータの設定のため flutter キーの下に generate: true を追
加しました（❶）
       。生成されたコードをプロジェクトから参照できるように以
下のコマンドを実行します。

$ flutter pub get




 ローカライズの構成ファイルを作成する
 次にローカライズの構成ファイルを作成します。左側の Project ビューでプ
ロジェクトルートを右クリックし、「New」➡「File」を選択します。ファイル名
を入力するダイアログが表示されるので、「l10n.yaml」    「OK」
                              と入力して   ボタン
をクリックします。
 構成ファイルは以下のように記述します。各パラメータの詳細は第 4 章を
参照してください。

./l10n.yaml
template-arb-file: app_ja.arb
output-class: L10n
nullable-getter: false




 arbファイルを作成する
 メッセージを管理する arb ファイルを作成します。左側の Project ビューで
lib フォルダを右クリックし、「New」➡「Directory」を選択します。フォルダ
名を入力するダイアログが表示されるので、「l10n」    「OK」
                          と入力して   ボタンを

                                                                     191
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




              クリックします。
                  次に l10n フォルダを右クリックし、「New」➡「File」を選択します。ファイ
              ル名を入力するダイアログが表示されるので、「app_ja.arb」と入力して「OK」
              ボタンをクリックします。arb ファイルは以下のように記述します。
              ./lib/l10n/app_ja.arb
              {
                  "startScreenTitle": "Edit Snap",
                  "helloWorldOn": "こんにちは！\n今日は{date}です",
                  "@helloWorldOn": {
                    "placeholders": {
                      "date": {
                            "type": "DateTime",
                                                  ❶
                            "format": "MEd"
                        }
                    }
                  },
                  "start": "開始する"
              }


                  スタート画面のメッセージには日付を埋め込みます。キーhelloWorldOn に
                                         （❶）
              プレースホルダを設定し、日付のフォーマットを指定しました  。type は
              日付型として DateTime、format は MEd
                                         （月、日、短縮系の曜日で構成されるフ
              ォーマット）
                   です。
                  arb ファイルを作成したら、以下のコマンドでコードジェネレータを実行し
              ます。

              $ flutter gen-l10n




                  ローカライズされたメッセージを適用する
                  コードジェネレータが完了したら、生成されたメッセージをコードに反映
              させましょう。main.dart を以下のように修正します。

              ./lib/main.dart
              import 'package:edit_snap/start_screen.dart';
              import 'package:flutter/material.dart';
              import 'package:flutter_gen/gen_l10n/app_localizations.dart';   ❶


              void main() {
                runApp(const MyApp());



    192
                                                                          アプリを日本語化する   6.5

}

class MyApp extends StatelessWidget {
    const MyApp({super.key});

    @override
    Widget build(BuildContext context) {
        return MaterialApp(
          localizationsDelegates: L10n.localizationsDelegates,     ❷
          supportedLocales: L10n.supportedLocales,    ❸
          title: 'Edit Snap',
          theme: ThemeData(
             colorScheme: ColorScheme.fromSeed(seedColor: Colors.teal),
             useMaterial3: true,
          ),
          home: const StartScreen(),
        );
    }
}

    生成されたコードをインポートし（❶）
                     、対応言語（今回は日本語のみ）
                                   の翻
訳データと対応言語のリストを渡します（❷、❸）。
    start_screen.dart は以下のように修正します。

./lib/start_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';          ❶


class StartScreen extends StatelessWidget {
  const StartScreen({super.key});


    @override
    Widget build(BuildContext context) {
      final l10n = L10n.of(context);     ❷
      return Scaffold(
        appBar: AppBar(
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
          title: Text(l10n.startScreenTitle),    ❸
          ),
          body: Center(
             child: Column(
               mainAxisAlignment: MainAxisAlignment.center,
               children: [
                 Text(
                   l10n.helloWorldOn(DateTime.now()),    ❹
                   textAlign: TextAlign.center,
                 ),


                                                                                       193
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




                                ElevatedButton( // 「開始する」ボタン
                                  child: Text(l10n.start), ❺
                                  onPressed: () {},
                                ),
                             ],
                           ),
                        ),
                      );
                  }
              }


                  こちらも生成コードをインポートし（❶）、各メッセージを生成コードから
              取得します（❷、❸、❹、❺）。



                  App Storeでの表示言語を設定する
                  最後に iOS ネイティブの対応言語を設定します。これは App Store に表示さ
              れ る ア プ リ の 対 応 言 語 に影 響 し ま す。ios/Runner/Info.plist を 開 き、
              CFBundleLocalizations キーの下に ja を追加します。

               ./ios/Runner/Info.plist
              <?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/
              PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                  <!-- 省略 -->
                  <key>CFBundleLocalizations</key>
                  <array>
                       <string>ja</string>
                  </array>
              </dict>
              </plist>

                  これで日本語化が完了しました。アプリを実行してみましょう。図 6.7 の
              ように日付のフォーマットが日本語になっていることが確認できます。




    194
                                         画像選択画面を作成する   6.6

図 6.7   日本語化したスタート画面




    6.6
    画像選択画面を作成する

    スマートフォンの画像ライブラリから画像を選択する画面を作成します。



    メッセージを追加する
    画像選択画面で使用するメッセージを arb ファイルに追加します。
 ./lib/l10n/app_ja.arb
{
    // 省略
    // （一つ上の行の末尾にカンマを追加してください）
    "imageSelectScreenTitle": "画像を選択",
    "imageSelect": "画像を選ぶ",
    "imageEdit": "画像を編集する"
}

    arb ファイルに追加したらコードジェネレータを実行します。
$ flutter gen-l10n




                                                       195
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




                  レイアウトを作成する
                  次に画像選択画面のコードを記述するファイルを作成します。左側の Project
              ビューで lib フォルダを右クリックし、「New」➡「Dart File」を選択します。フ
              ァイル名を入力するダイアログが表示されるので、「image_select_screen」と
              入力して「OK」
                     ボタンをクリックします。
                  画像選択画面は StatefulWidget を継承したクラスで実装します。

              ./lib/image_select_screen.dart
              import 'package:flutter/material.dart';
              import 'package:flutter_gen/gen_l10n/app_localizations.dart';

              class ImageSelectScreen extends StatefulWidget {
                  const ImageSelectScreen({super.key});

                  @override
                  State<ImageSelectScreen> createState() => _ImageSelectScreenState();
              }


              class _ImageSelectScreenState extends State<ImageSelectScreen> {

                  @override
                  Widget build(BuildContext context) {
                    final l10n = L10n.of(context);
                    return Scaffold(
                      appBar: AppBar(
                         backgroundColor: Theme.of(context).colorScheme.inversePrimary,
                         title: Text(l10n.imageSelectScreenTitle),
                      ),
                      body: Center(
                         child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                               ElevatedButton( // 「画像を選ぶ」ボタン
                                  onPressed: () {},
                                  child: Text(l10n.imageSelect),
                               ),
                               ElevatedButton( // 「画像を編集する」ボタン
                                  onPressed: () {
                                  },
                                  child: Text(l10n.imageEdit),
                               ),
                            ],
                         ),
                      ),


    196
                                                                     画像選択画面を作成する   6.6

        );
    }
}


    レイアウトはスタート画面とおおむね同じです。上部に AppBar ウィジェッ
トがあり、「画像を選ぶ」ボタンと「画像を編集する」ボタンが垂直方向に並び
ます。
    続いて、スタート画面から画像選択画面に遷移する処理を実装します。

./lib/start_screen.dart
import 'package:edit_snap/image_select_screen.dart';        ❶
import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';


class StartScreen extends StatelessWidget {
  const StartScreen({super.key});

    @override
    Widget build(BuildContext context) {
      final l10n = L10n.of(context);
      return Scaffold(
        appBar: AppBar(
           backgroundColor: Theme.of(context).colorScheme.inversePrimary,
           title: Text(l10n.startScreenTitle),
        ),
        body: Center(
           child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                 Text(
                    l10n.helloWorldOn(DateTime.now()),
                    textAlign: TextAlign.center,
                 ),
                 ElevatedButton( // 「開始する」ボタン
                    child: Text(l10n.start),
                    onPressed: () {
                       Navigator.of(context).push(
                          MaterialPageRoute(
                             builder: (context) => const ImageSelectScreen(), ❷
                          ),
                       );
                    },
                 ),
              ],
           ),
        ),


                                                                                   197
第
    6 実践ハンズオン❶
          章
              画像編集アプリを開発




                      );
                  }
              }


                  画像選択画面のクラスを参照するため image_select_screen.dart をインポ
              ートしました（❶）。
                       「開始する」ボタンの onPressed コールバックで画像選択
              画面に遷移する処理を実装しました（❷）
                                。今回はシンプルに Navigator 1.0 の
              API を採用し、MaterialPageRoute を使用した画面遷移です。
                  これで画像選択画面に遷移する処理が実装できました。アプリを実行し、
              スタート画面の「開始する」ボタンをタップしてみましょう。図 6.8 のように
              画像選択画面に遷移します。

              図 6.8        画像選択画面




                  画像ライブラリから画像を取得する
                  スマートフォンの画像ライブラリから画像を取得する処理は、image_picker
              パッケージを使用します。また画像データを取り扱うために image パッケー
              ジも使用します。


              パッケージを導入する
                  パッケージを導入するためにプロジェクトのディレクトリで、ターミナル
              から以下のコマンドを実行してください。

    198
