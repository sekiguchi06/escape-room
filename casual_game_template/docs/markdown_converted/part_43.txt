                                                          アプリの設定変更   11.2

  flutter_native_splash のより詳細な使い方は pub.dev 注 6 を参照してください。



  アプリのID
  iOS も Android もそれぞれアプリを一意に識別する ID があります。iOS は
Bundle ID、Android は Application ID と呼ばれます。この ID は他のアプリと
重複しないように、自分が所有するドメインを逆順にしたものを使用するの
が一般的です。たとえば、筆者が所有するドメインが example.com であれば、
com.example.myapp のようになります。
  プログラムがまったく同じアプリでもアプリ ID が異なると別のアプリとし
て扱われます。これを逆手にとり、検証環境のサーバに接続するアプリと本
番環境のサーバに接続するアプリを 1 台の端末に共存させることができます。


iOSのアプリIDを設定する
  iOS のアプリ ID はプロジェクトファイルに記述されています。Xcode で編集
するのが無難です。ios/Runner.xcworkspace を Xcode で開き、TARGETS の
「Runner」を選択して（❶）
               「Build Settings」のタブを開きます（❷）
                                         。「bundle
identifier」でフィルタをかけると
                    （❸）             （図 11.6）
                      、すぐに設定項目が見つかります      。

図 11.6   bundle identifier の設定の様子



                                                      ❷
                                                               ❸


                                  ❶




注6   https://pub.dev/packages/flutter_native_splash


                                                                     319
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              AndroidのアプリIDを設定する
                  Android のアプリ ID はアプリのビルド構成ファイル android/app/build.
              gradle に記述します。android エントリ内 defaultConfig の applicationId に
              設定します。

               ./android/app/build.gradle
              android {
                   defaultConfig {
                       applicationId "com.example.myapp"
                   }
              }




                  11.3
                  アプリの配布とコード署名

                  App Store や Google Play Store でアプリを配布するには、アプリにデジタル
              署名をする必要があります。筆者の考えるモバイルアプリの鬼門はこのコー
              ド署名です。
                  コード署名とは、アプリの開発元が正しく、配布されたアプリが改ざんさ
              れていないことを証明するしくみです。秘密鍵を使ってアプリに署名し、そ
              の秘密鍵とペアになる公開鍵の証明書をアプリの中に埋め込みます。こうす
              ることで、アプリが改ざんされていないか検証することができるのです。iOS
              と Android とで証明書の取り扱いがまったく異なり、Flutter エンジニアにと
              っては敷居が高いものとなっています。
                  本節では、iOS と Android のコード署名のしくみ、App Store や Google Play
              Store でアプリを配布するための署名の方法を解説します。なお、Apple と
              Google の開発者アカウントが必要となりますが、これらを事前に取得してい
              ることを前提として解説します。Apple の開発者アカウントと Google の開発
              者アカウントはそれぞれ以下から登録できます。

              ・https://developer.apple.com/jp/programs/
              ・https://developer.android.com/distribute/console

                  料金が発生しますのでよく確認してから登録してください。
                  また、本章で利用するアカウントは Apple Developer Program に個人登録し
              た Apple ID を想定しています。組織登録した場合や Apple Developer Enterprise

    320
                                 アプリの配布とコード署名   11.3

Program に登録した場合などではアカウントがアプリの登録、アプリ ID
（AppID）やプロビジョニングプロファイルの作成、証明書の作成に必要な権
限を付与されている必要があります。



 iOSのコード署名
 iOS のコード署名と検証のプロセスには、プロビジョニングプロファイル
というファイルが関わってきます。プロビジョニングプロファイルはアプリ
ID と証明書が含まれたファイルです。アプリ ID と証明書は Apple の開発者ア
カウントに紐付いています。
 Xcode プロジェクトは以下の 4 つの設定項目があり、すべてが正しく設定
されていなければ、アプリの署名は成功しません。

・Apple の開発者アカウント（Team ID）
・アプリ ID
・証明書
・プロビジョニングプロファイル



管理の難しい秘密鍵
 iOS のコード署名で管理が難しいのが秘密鍵です。証明書を発行した Mac
にのみ秘密鍵が存在し、他の Mac に移す際は証明書とともにエクスポートす
る必要があります。秘密鍵を紛失した場合は、証明書を再発行する必要があ
ります。また、証明書には有効期限があり、有効期限が切れた場合もまた再
発行する必要があります。
 これらの管理の手間を軽減する手段としてクラウド管理対象証明書という
しくみが導入されました。秘密鍵や証明書は Apple が管理し、ビルド環境に
は必要ありません。任意の環境でビルドしたアプリのハッシュ値を Apple に
送信し、署名情報を取得してアプリに署名するというしくみです（図 11.7）。




                                                321
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              図 11.7   クラウド管理対象証明書のしくみ




                                                        Hash



                クラウド管理対象証明書を使うかどうかは選択可能です。本書ではこのし
              くみを使ってアプリを署名する方法を解説します。


              アプリに署名する
                それでは、クラウド管理対象証明書を使ってアプリに署名する手順を解説
              します。ios/Runner.xcworkspace を Xcode で開きます。図 11.8 のようにナビ
              ゲーションペインの「Runner」を選択し（❶）、TARGETS の「Runner」を選択し
               （❷）
              ます 。

              図 11.8   「Signing & Capabilities」のタブを表示



                                             ❸
                              ❶




                                       ❷                ❹




                続いて、
                   「Signing & Capabilities」のタブを選択します（❸）。
               「Add Account...」         （❹）とログイン画面が表示されま
                              のボタンをクリックする
              すので、Apple の開発者アカウントでログインします（図 11.9）。

    322
                                                アプリの配布とコード署名     11.3

図 11.9    ログインダイアログ




  ログインが完了したら設定画面を閉じます。
  図 11.10 の画面が表示されたら、まず「Automatically manage signing」のチェ
                      （❶）
ックボックスがオンになっていることを確認します   「Team」
                        。次に    のドロッ
プダウンリストから Apple の開発者アカウントを選択します（❷）
                                 。最後にアプ
リ ID を設定します注（❸）
            7
              。アプリ ID の変更は
                         「iOS のアプリ ID を設定する」
                                           の
           「Signing & Capabilities」
項で解説した方法か、この                      のタブからも行えます。

図 11.10   Team、アプリ ID の設定の様子




                           ❶
                                          ❷

                                          ❸




  クラウド管理対象証明書を使う場合、設定は以上です。
  いよいよアプリの署名を開始します。ビルド対象を「Any iOS Device」に設



注7   図ではアプリ ID が「com.example...」となっていますが、アプリ ID としては無効な文字列です。検
     証される際は有効なアプリ ID を設定してください。


                                                                 323
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




              定します（図 11.11）。

              図 11.11   ビルド対象の選択




                Xcode のメニューから「Product」➡「Archive」を選択します。アーカイブと
              は、アプリの成果物をひとまとめにしたバンドルを作成することです。
                完了するとオーガナイザーが開きます。通常、先ほどの操作で作成したア
              ーカイブが選択されていますので、そのまま「Distribute App」をクリックしま
              す（図 11.12）。

              図 11.12   オーガナイザーウィンドウ




                配布先の選択画面が表示されますので、「TestFlight & App Store」を選択し
               （図 11.13）
              ます        。

    324
                                       アプリの配布とコード署名   11.3

図 11.13   配布先の選択画面




  App Store Connect にアプリが登録されていない場合は、アプリ情報を入力す
             「Name:」
るダイアログが表示されます。     は App Store に表示されるアプリ名です。
「SKU:」はアプリを一意に識別するための ID です。デフォルトでは Bundle ID と
同じ値が設定されていて、そのままで問題ありません。日本語にのみ対応するア
     「Primary Language:」
プリの場合は                 は「Japanese」
                                 に設定しましょう。最後に
                                            「Bundle
Identifier」           「Next」
          に誤りがないことを確認して           （図11.14）
                           をクリックします      。

図 11.14   アプリ情報の入力画面




                                                      325
第
    11 Flutterアプリ開発に必要なネイティブの知識
          章




                するとアプリの署名と App Store Connect へのアップロードが開始されま
              す。完了すると図 11.15 の画面が表示されます。

              図 11.15   アップロード完了画面




                画面左下の「Export」ボタンをクリックし、任意のディレクトリに出力する
              とアプリの要約が確認できます。DistributionSummary.plist というファイ
              ルが出力されますので、テキストエディタで開いてみましょう。

               ./DistributionSummary.plist
              <!-- 省略 -->
                        <key>certificate</key>
                        <dict>
                            <key>SHA1</key>
                            <string>ハッシュ値</string>
                            <key>dateExpires</key>
                            <string>有効期限</string>
                            <key>type</key>
                            <string>Cloud Managed Apple Distribution</string>
                        </dict>


                キーcertificate の type が「Cloud Managed Apple Distribution」になってお
              り、クラウド管理対象証明書で署名されていることがわかります。



                Androidのコード署名
                Android では秘密鍵と公開鍵証明書を格納したキーストアというファイルを使用
              します。iOS と同様に、Android も証明書をクラウドで管理するしくみがあり、Google
              Play Console ではこの方法を推奨しています。その手順は以下のとおりです。

    326
