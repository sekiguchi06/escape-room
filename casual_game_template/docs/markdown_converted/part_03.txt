                                                                                                                   目次




 第
     10
高速で保守性の高いアプリを
             章



開発するためのコツ........................................................................... 285
10.1 パフォーマンスと保守性、どちらを優先すべきか                                                                                       286

          高速でないアプリとは................................................................................ 286
          高速だが保守性が低い実装...................................................................... 286

10.2 高速で保守性の高い実装                                                                                                  287

           buildメソッドで高コストな計算をしない.................................................... 287
           buildメソッドで大きなウィジェットツリーを構築しない. . ............................. 289
               ウィジェットツリーの階層が浅くなるようウィジェットの選択を見なおす. . . 289
           const修飾子を付与する. . .......................................................................... 291
              const修飾子が使えるようウィジェットの選択を見なおす...................... 292
              独自のウィジェットクラスにconstantコンストラクタを実装する............. 292
          状態を末端のウィジェットに移す................................................................ 297
           Riverpodの状態監視は末端のウィジェットで行う..................................... 300
                    Tips    アプリのパフォーマンスを計測する. . ................................................ 303


10.3 まとめ                                                                                                          304




 第
     11      章

Flutterアプリ開発に必要な
ネイティブの知識................................................................................... 305
11.1 ネイティブAPIのバージョンと最低サポートOSのバージョン                                                                                306

          最低サポートOSのバージョン.................................................................... 306
            iOSの最低サポートOSバージョンを設定する. . .................................... 308
                    Tips    XcodeのBuild Settings............................................................. 308
                Androidの最低サポートOSバージョンを設定する................................ 310
          ビルドSDKバージョン................................................................................ 310
            iOSのビルドSDKバージョンの設定.................................................... 310
            AndroidのビルドSDKバージョンの設定.. ............................................ 310
          ターゲットSDKバージョン. . ........................................................................ 311

11.2 アプリの設定変更                                                                                                     312

          アプリ名..................................................................................................... 312


                                                                                                                          xvii
                   iOSのアプリ名を変更する................................................................ 312
                   Androidのアプリ名を変更する.......................................................... 312
             アプリアイコン............................................................................................ 313
               iOSのアプリアイコンを変更する........................................................ 313
               Androidのアプリアイコンを変更する.................................................. 314
               アプリアイコンを手軽に生成するパッケージ. . ...................................... 315
             スプラッシュ画面.. ...................................................................................... 316
               iOSとAndroidで異なるスプラッシュ画面の位置付け............................ 316
               iOSのスプラッシュ画面..................................................................... 316
               Androidのスプラッシュ画面.. ............................................................. 317
               スプラッシュ画面を手軽に実現するパッケージ. . ................................... 317
             アプリのID................................................................................................. 319
               iOSのアプリIDを設定する................................................................ 319
               AndroidのアプリIDを設定する......................................................... 320

        11.3 アプリの配布とコード署名                                                                                               320

              iOSのコード署名....................................................................................... 321
                 管理の難しい秘密鍵........................................................................ 321
                 アプリに署名する. . ........................................................................... 322
              Androidのコード署名.. .............................................................................. 326
              apkファイルとaabファイル........................................................................ 327
                 アプリに署名する. . ........................................................................... 327
                 aabファイルをアップロードする......................................................... 330

        11.4 まとめ                                                                                                        334



             参考Web情報. . .......................................................................................... 335
             著者プロフィール.. ...................................................................................... 335


             索引........................................................................................................... 336




xviii
環境構築とアプリの実行
                        第
                            1   章




 Flutter SDK、Android Studio、Xcode




                                    1
第
    1 環境構築とアプリの実行
        章
            Flutter SDK、Android Studio、Xcode




              本章では、Flutter の特徴を簡単に紹介したのち、環境構築の手順を解説し
            ます。Flutter 公式がアナウンスしている環境構築の手順に加え、筆者が普段
            から利用しているツールなども紹介します。最後には、テンプレートの Flutter
            アプリを起動するところまでを実践します。



             1.1
              なぜFlutterが注目を集めているのか

              Flutter は Google を中心としたオープンソースコミュニティによって開発さ
            れているマルチプラットフォームフレームワークです注 1。これまでのマルチプ
            ラットフォーム技術とは一線を画した実現方式を持ち、高速な実行速度と優
            れた開発者体験が特徴です。この Flutter がスマートフォンアプリの開発にお
            いて、シェアを伸ばしています。



              マルチプラットフォーム
              Flutter は 1 つのコードベースからさまざまなプラットフォームへアプリケ
            ーションを提供することができます。そのサポート環境は、公式発表でモバ
            イル（iOS および Android）、デスクトップ（Windows、macOS および Linux）、
            Web フロントエンドと多岐にわたります。
              また、複数のプラットフォームで安定した動作を実現する構成になってい
            る点も特徴です。マルチプラットフォーム技術の中には Xamarin 注 2 のように
            ネイティブ UI（User Interface）をラップした形式のものがあります。こうした
            フレームワークでは、複数プラットフォームの API をラップする過程で、吸
            収しきれない差異が発生するケースがあります。一方で Flutter はネイティブ
            の UI を使わない、独自のレンダリングのしくみを持っています。そのため
            「iOS でデバッグしたあと、Android でデバッグすると想定した UI になってい
            ない」といった動作差異が限りなく小さくなります。
              なお、本書では iOS と Android を対象としたモバイル開発についてのみ取り
            扱います。


            注1    https://flutter.dev/
            注2    https://docs.microsoft.com/ja-jp/xamarin/


    2
                                                 Flutterの環境構築   1.2


 高速な実行速度
 Flutter で開発したアプリケーションはネイティブコードにコンパイルされ
ます。Cordova 注 3 などのように WebView 上で動作するマルチプラットフォー
ムフレームワークよりも、高速に動作することが期待できます。開発元の
Google は、前項でも触れた独自のレンダリングのしくみによる高いパフォー
マンスをアピールしています。筆者の体感としても、他のいくつかのマルチ
プラットフォームフレームワークと比較して、Flutter は安定して高いパフォ
ーマンスを発揮しているように感じます。



 優れた開発者体験
 フレームワークの浸透、発展において優れた開発者体験は重要であり、
Flutter はその要素を十分に持っています。筆頭に挙げられるのはホットリロ
ードで、ソースコードの変更を実行中のアプリに即座に反映するしくみです。
プログラムで UI を微調整したらすぐにアプリの画面に反映されるため、トラ
イ＆エラーをすばやく繰り返すことが可能です。また、コードラボ（チュート
              （実装例）
リアル）注 4 やクックブック   注5
                     が充実しています。パッケージ管理ツー
ルやコードの静的解析ツールなどが統合されている点も開発者にとってうれ
しいポイントの一つです。



 1.2
 Flutterの環境構築

 それでは Flutter の開発環境を構築しましょう。Flutter の環境構築は大きく
2 つの段階があります。
 1 つ目は Flutter SDK（Software Development Kit）のインストール、2 つ目は実行
するプラットフォームである iOS と Android の開発環境のインストールです。
 なお、iOS を開発対象にすることもあり、本書では macOS 環境についての



注3   https://cordova.apache.org
注4   https://docs.flutter.dev/codelabs
注5   https://docs.flutter.dev/cookbook


                                                                 3
第
    1 環境構築とアプリの実行
        章
            Flutter SDK、Android Studio、Xcode




            み取り扱います。執筆時の環境は以下です。

            ・macOS Sonoma 14.3
            ・Flutter 3.16.9




              Flutterのインストール
              本項のいくつかの手順は、後述の「1.3 fvm による Flutter のバージョン管理」
            の節で解説する fvm というツールを導入することで省略できます。しかし、
            はじめての環境構築は内容を理解するためにも、手順を踏んでインストール
            してみることをお勧めします。
              まずは、Flutter の公式 Web サイトから Flutter SDK の ZIP ファイルをダウン
            ロードします。URL の参照先は iOS の環境構築に関するページですが、Flutter
            SDK の ZIP ファイルは他のプラットフォームと共通です。

            ・https://docs.flutter.dev/get-started/install/macos/mobile-ios?tab=down
             load#install-the-flutter-sdk


              ZIP ファイルは Intel CPU 向けと Apple Silicon 向けが用意されていますので、
            お使いの環境に合わせてダウンロードしてください。
              Apple Silicon 搭載の Mac をお使いの場合は、加えて Rosetta 2 をインストー
            ルしましょう。SDK に含まれる一部の実行ファイルが x64 アーキテクチャで
            提供されており、これらを Apple Silicon 搭載の Mac で動作させるために Rosetta
            2 が必要になります。Rosetta 2 は以下のコマンドでインストールします。
            # Rosetta 2をインストール
            $ sudo softwareupdate --install-rosetta --agree-to-license

              ダウンロードした ZIP ファイルを解凍し、任意のディレクトリに配置しま
            す。今回は公式 Web サイトで紹介されているディレクトリ（~/development）
            で進めます。

                 ~/development
                 └── flutter
                     ├── bin
                     ├── dev
                     ├── examples
                     ├── packages
                     └── ...（省略）

              次に、配置した Flutter SDK にパスを通します。以下のコマンドを実行し、

    4
                                                                    Flutterの環境構築   1.2

        どうこん
SDK に同梱されている実行ファイルをどのディレクトリからでも実行できる
ようにします。

# flutterのコマンドラインツールにパスを通す
$ echo "export PATH=\"\$PATH:$HOME/development/flutter/bin\"" >> ~/.zshenv
# 実行中のシェルにパスを適用
$ . ~/.zshenv


  これで Flutter のインストールは完了です。確認のため、Flutter のバージョ
ンをターミナルに出力してみましょう。
# flutterのバージョンを出力
$ flutter --version

  環境に git がインストールされていない場合は、デベロッパツールのインス
トールを促すダイアログが表示されます（図 1.1）。これは Flutter のコマンド
ラインツールが、内部で git コマンドを呼び出しているためです。インストー
ルしておきましょう。

図 1.1   デベロッパツールのインストールダイアログ




  筆者の環境では flutter --version の結果は以下のように出力されました。

Flutter 3.16.9 • channel stable • https://github.com/flutter/flutter.git
Framework • revision 41456452f2 (32 hours ago) • 2024-01-25 10:06:23 -0800
Engine • revision f40e976bed
Tools • Dart 3.2.6 • DevTools 2.28.5




  プラットフォームごとの環境のインストール
  Flutter で開発したプロジェクトを iOS や Android へビルドするために、各プ
ラットフォームの開発環境を構築する必要があります。開発環境の情報を出
力するコマンド（flutter doctor）
                      を活用しながら各プラットフォームの開発
環境をインストールしていきましょう。

                                                                                    5
第
    1 環境構築とアプリの実行
        章
            Flutter SDK、Android Studio、Xcode




            # flutterの開発環境の情報を出力
            $ flutter doctor


            図 1.2     flutter doctor の出力結果

             [✓] Flutter (Channel stable, 3.16.9, on macOS 14.3 23D56 darwin-arm64, locale ja-JP)
                                                                                                     ❶
             [✗] Android toolchain - develop for Android devices
                    ✗ Unable to locate Android SDK.
                      Install Android Studio from: https://developer.android.com/studio/index.html
                      On first launch it will assist you in installing the Android SDK components.
                      (or visit https://flutter.dev/docs/get-started/install/macos#android-setup for
             detailed instructions).
                      If the Android SDK has been installed to a custom location, please use
                      `flutter config --android-sdk` to update to that location.

                                                                                                  ❷
             [✗] Xcode - develop for iOS and macOS
                    ✗ Xcode installation is incomplete; a full installation is necessary for iOS and
             macOS development.
                      Download at: https://developer.apple.com/xcode/
                      Or install Xcode via the App Store.
                      Once installed, run:
                        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
                        sudo xcodebuild -runFirstLaunch
                    ✗ CocoaPods not installed.
                        CocoaPods is used to retrieve the iOS and macOS platform side's plugin code
             that responds to your
                        plugin usage on the Dart side.
                        Without CocoaPods, plugins will not work on iOS or macOS.
                        For more info, see https://flutter.dev/platform-plugins
                      To install see https://guides.cocoapods.org/using/getting-started.html#install
             ation for instructions.
             [✗] Chrome - develop for the web (Cannot find Chrome executable at /Applications/Google
                    Chrome.app/Contents/MacOS/Google Chrome)
                    ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.
             [!] Android Studio (not installed)       ❸
             [✗] Connected device (1 available)
             [✗] Network resources



              コマンドの出力結果（図 1.2）の❶と❸が Android の開発環境、❷が iOS の開
            発環境に関わる項目です。


            Androidの開発環境をインストールする
              あらためて flutter doctor の出力結果から、Android の開発環境に関わる
            項目を確認します。Android の開発環境がまだ構築されていない場合は、以下

    6
